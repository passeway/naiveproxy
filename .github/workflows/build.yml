name: Daily Check and Build Caddy

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.tag.outputs.build }}
      tag: ${{ steps.tag.outputs.tag }}
      ver: ${{ steps.tag.outputs.ver }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
    
    - id: latest
      name: Get latest Caddy version
      run: echo "tag=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r .tag_name)" >> $GITHUB_OUTPUT
    
    - id: current
      name: Get latest tag from current repository
      run: |
        if git tag | grep -q .; then
          echo "tag=$(git tag | sort -V | tail -n1)" >> $GITHUB_OUTPUT
        else
          echo "tag=none" >> $GITHUB_OUTPUT
        fi
    
    - id: tag
      name: Compare and create tag
      run: |
        latest="${{ steps.latest.outputs.tag }}"
        current="${{ steps.current.outputs.tag }}"
        echo "Latest version: $latest"
        echo "Current version: $current"
        
        if [ "$latest" != "$current" ]; then
          if ! git ls-remote --tags origin | grep -q "refs/tags/$latest"; then
            git config user.name github-actions
            git config user.email github-actions@users.noreply.github.com
            git tag "$latest"
            git push origin "$latest"
          else
            echo "Tag $latest already exists, skipping creation"
          fi
          echo "tag=$latest" >> $GITHUB_OUTPUT
          echo "ver=${latest#v}" >> $GITHUB_OUTPUT
          echo "build=true" >> $GITHUB_OUTPUT
        else
          echo "Same version, no need to build"
          echo "build=false" >> $GITHUB_OUTPUT
        fi

  build:
    needs: check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go environment
      uses: actions/setup-go@v5
      with:
        go-version: stable
        cache: false
    
    - name: Install xcaddy
      run: |
        go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Build Caddy (${{ matrix.arch }})
      run: |
        echo "Building for ${{ matrix.arch }}"
        GOOS=linux GOARCH=${{ matrix.arch }} xcaddy build ${{ needs.check.outputs.tag }} \
          --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive
        test -f caddy && chmod +x caddy || (echo "Caddy build failed" && exit 1)
        tar -czvf caddy_${{ needs.check.outputs.ver }}_linux_${{ matrix.arch }}.tar.gz caddy
        sha256sum caddy_${{ needs.check.outputs.ver }}_linux_${{ matrix.arch }}.tar.gz > caddy_${{ needs.check.outputs.ver }}_linux_${{ matrix.arch }}.sha256
    
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.check.outputs.tag }}
        name: ${{ needs.check.outputs.tag }}
        body: |
          ### Caddy with forwardproxy-na√Øve
        files: |
          caddy_${{ needs.check.outputs.ver }}_linux_${{ matrix.arch }}.tar.gz
          caddy_${{ needs.check.outputs.ver }}_linux_${{ matrix.arch }}.sha256